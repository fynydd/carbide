@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using System
@using System.Security.Cryptography
@using Umbraco.Web
@using Carbide.Web.Helpers
@using Fynydd.Carbide

@{ 
    object _instanceId;
    Html.ViewData.TryGetValue("instanceId", out _instanceId);
    var instanceId = _instanceId == null ? "hero-unit" : _instanceId.ToString();
    var selector = ".carbide_simple_hero_unit#" + instanceId;

    Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", selector));
    Html.RenderPartial("_Partial_CSS_Custom_Properties", Model, Html.ViewData);



    // BEGIN: MICROSOFT EDGE OVERRIDES

    var breakpoints = new string[] { "zero", "phab", "tabp", "tabl", "note", "desk", "elas" };
    var processMicrosoftEdgeOverrides = false;

    foreach (var breakpoint in breakpoints)
    {
        var width = Settings.GetCssBreakpoint(breakpoint);

        if (width != "false")
        {
            if (Model.SafeValue(breakpoint + "CssProperties").HasValue())
            {
                var props = Model.SafeValue(breakpoint + "CssProperties").ToLower().Replace(" ", "");

                if (props.Contains("--content-align:") || props.Contains("--nodes-align:"))
                {
                    processMicrosoftEdgeOverrides = true;
                    break;
                }
            }
        }
    }

    if (processMicrosoftEdgeOverrides)
    {
    <style type="text/css">
        @foreach (var breakpoint in breakpoints)
        {
            var width = Settings.GetCssBreakpoint(breakpoint);

            if (width != "false")
            {
                if (Model.SafeValue(breakpoint + "CssProperties").HasValue())
                {
                    var props = Model.SafeValue(breakpoint + "CssProperties").ToLower().Replace(" ", "");

    <text>
    @@media (min-width: @(width)) {

        @if (props.Contains("--content-align:"))
        {
            <text>
            @Html.Raw(selector + " > [sf-outer-wrapper] > [sf-inner-wrapper] #hero-content") {

                text-align: @(props.Contains("--content-align:center") ? "center" : (props.Contains("--content-align:right") ? "right" : "left"));
            }
            </text>
        }

        @if (props.Contains("--nodes-align:"))
        {
            <text>
            @Html.Raw(selector + " > [sf-outer-wrapper] > [sf-inner-wrapper] .nodes") {

                text-align: @(props.Contains("--content-align:center") ? "center" : (props.Contains("--content-align:right") ? "right" : "left"));
            }
            </text>
        }
    }
    </text>
                }
            }
        }
    </style>
    }

    // END: MICROSOFT EDGE OVERRIDES
}
<section id="@(instanceId)" class="carbide_simple_hero_unit" sf-unit>
    <div sf-outer-wrapper>
        <div sf-inner-wrapper>
            <div role="grid" style="--sf-centered: true;">
                <div role="gridcell" class="outer-gridcell">
                    <div id="hero-content">
                        <div role="presentation">
                            <div role="grid">
                                <div role="gridcell" class="inner-gridcell">
                                    @foreach(var frame in Model.SafeNestedValues("frames").Where(f => f.SafeValue<bool>("enabled")))
                                    {
                                    <div class="frame" data-img="@(frame.PickerValue("backgroundImage").Url)?width=1920&quality=75" style="transition-duration: @(Model.SafeValue<float>("frameTransitionTime")/1000)s;">
                                        <h1>@Html.Raw(frame.SafeValue("title").ProcessShortCodes(Model, frame))</h1>
                                        <div class="excerpt-row">
                                            @Html.Raw(frame.SafeValue("excerpt").ProcessShortCodes(Model, frame))
                                        </div>
                                        @if(frame.HasValue("buttonText"))
                                        {
                                        <div class="button-row">
                                            <a href="@(frame.HasValue("buttonLink") ? frame.PickerValue("buttonLink").Url : frame.SafeValue<string>("buttonUrl"))" role="button">@Html.Raw(frame.SafeValue("buttonText").ProcessShortCodes(Model, frame))</a>
                                        </div>
                                        }
                                    </div>
                                    }
                                </div>
                            </div>
                            <div class="nodes">
                            @foreach(var frame in Model.SafeNestedValues("frames").Where(f => f.SafeValue<bool>("enabled")))
                            {
                                <a></a>
                            }
                                <span></span>
                            </div>
                        </div>
                        <script>

                            $(document).ready(function () {

                                $("#@(instanceId)").carbideSimpleHero({

                                    slideDuration: @(Model.SafeValue<int>("frameDuration")),
                                    transitionTime: @(Model.SafeValue<int>("bgTransitionTime")),
                                    showCountdown: true
                                });
                            });

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
