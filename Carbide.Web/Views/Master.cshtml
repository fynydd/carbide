@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using Umbraco.Web
@using Carbide.Web.Helpers
@using Fynydd.Carbide
@{
    Layout = null;

    var umbCtx = DependencyResolver.Current.GetService<IUmbracoContextFactory>().EnsureUmbracoContext().UmbracoContext;
    var home = Model.AncestorOrSelf(1);
    var settings = home.Children.First(c => c.ContentType.Alias == "settings");
}
<!DOCTYPE html>
<html lang="en">
<head>
    @{
        Html.RenderPartial("_Partial_Meta_Head");

        var breakpoints = new string[] { "zero", "phab", "tabp", "tabl", "note", "desk", "elas" };

    <style type="text/css">

        @if(settings.SafeValue("customFontURLs").HasValue())
        {
<text>    @Html.Raw(settings.SafeValue("customFontURLs"))</text>
        }

    :root {

        @if(settings.SafeValue("bodyFontStack").HasValue())
        {
<text>        --font-body: @Html.Raw(settings.SafeValue("bodyFontStack").Trim(";"));</text>
        }@if(settings.SafeValue("monoFontStack").HasValue())
        {
<text>        --font-mono: @Html.Raw(settings.SafeValue("monoFontStack").Trim(";"));</text>
        }@if (settings.SafeValue("headlineFontStack").HasValue())
        {
<text>        --font-head: @Html.Raw(settings.SafeValue("headlineFontStack").Trim(";"));</text>
        }
    }

    </style>

        // Site-level CSS overrides
        Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", ":root"));
        Html.RenderPartial("_Partial_CSS_Custom_Properties", settings, Html.ViewData);
        Html.ViewData.Clear();
    }

    @RenderSection("pageCssSection", required: false)

</head>
<body>
    <section id="siteContent">
        <main role="main">
            @RenderBody()
        </main>
    </section>
    <script type="text/javascript">

        var _lastWindowWidth = 0;

        (function ($) {

            var d = 250, t = null, e = null, resizeend, resizestart, r = false;

            resizeend = function () {

                r = false;
                $(window).trigger('resizeend', e);
            };

            resizestart = function () {

                e = event || e;

                clearTimeout(t);

                if (!r) {

                    $(window).trigger('resizestart', e);
                    r = true;
                }

                if (_lastWindowWidth != $(window).outerWidth()) {

                    _lastWindowWidth = $(window).outerWidth();

                    t = setTimeout(resizestart, d);

                } else {

                    t = setTimeout(resizeend, d);
                }
            };

            $(window).on('resize', function (event) {

                var retry = setTimeout(resizestart, 0);
            });

        }(jQuery));

        $(document).ready(function(){

            $(window).on("resizestart", function () {

                $(".fluidbox-image > a").trigger("destroy.fluidbox");

                $(".fluidbox-image > a").on("click", function (e) {

                    e.preventDefault();
                });
            });

            $(window).on("resizeend", function () {

                if ($(window).innerWidth() >= @(SiteSettings.GetCssBreakpoint("tabp").Replace("px", ""))) {

                    $(".fluidbox-image > a").off("click");

                    $(".fluidbox-image > a").fluidbox({

                        viewportFill: 0.9,
                        loader: true
                    });
                }
            });

            $(window).trigger("resizestart");
            $(window).trigger("resizeend");
        });

    </script>
</body>
</html>
