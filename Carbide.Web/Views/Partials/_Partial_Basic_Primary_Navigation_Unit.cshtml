@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using System
@using Umbraco.Web
@using Umbraco.Web.Models
@using Fynydd.Carbide
@using Carbide.Web.Helpers

@{ 
    if (Model.SafeValue<bool>("enabled"))
    {
        var umbCtx = DependencyResolver.Current.GetService<IUmbracoContextFactory>().EnsureUmbracoContext().UmbracoContext;
        var home = umbCtx.Content.GetById(umbCtx.PublishedRequest.InitialPublishedContent.Id).AncestorOrSelf(1);
        var settings = home.Children.First(c => c.ContentType.Alias == "settings");
        var pages = home.DescendantsOrSelf().Where(d => d.Level <= home.Level + 1 && d.GetTemplateAlias().HasValue() && d.HasProperty("showInNavigation") && d.SafeValue<bool>("showInNavigation"));

        Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", ".carbide_basic_primary_navigation_unit#primary-navigation"));
        Html.RenderPartial("_Partial_CSS_Custom_Properties", Model.PickerValue("style"), Html.ViewData);

<section id="primary-navigation" class="carbide_basic_primary_navigation_unit" sf-unit>
    <div class="background-layer"></div>
    <div sf-outer-wrapper>
        <div sf-inner-wrapper>
            <div class="dim-overlay closed" onclick="toggleMenu();"></div>
            <nav role="main">
                <div role="grid" style="--sf-row-gutters: var(--row-gutter); --sf-equal-heights: true; --sf-centered: true;">
                    <div role="gridcell">
                        <section>
            @if (settings.HasValue("companyLogo"))
            {
                            <a href="/" title="@(settings.SafeValue("companyName")) home page"><img src="@(settings.PickerValue("companyLogo").Url)" /></a>
            }

            else
            {
                            <h3>@(settings.SafeValue("companyName"))</h3>
            }
                        </section>
                    </div>

                    <div role="gridcell" sf-width-auto="true">
                        <section>
                            <a onclick="toggleMenu();" class="hamburger mobile-only"><img src="/images/bars.png" /></a>
        @if (Model.SafeValue<bool>("showChildrenOfHomePage"))
        {
            if (pages != null && pages.Count() > 0)
            {
                foreach (var page in pages)
                {
                    var current = false;
                    var currentUrl = HttpContext.Current.GetRelativeUrl(useLowerCase: true, stripQueryString: true);
                    var newUrl = page.GetRelativeUrl().ToLower().RemoveQueryString().TrimEnd("/");

                    if (currentUrl == newUrl)
                    {
                        current = true;
                    }

                            <a href="@(page.GetRelativeUrl())" class="not-mobile@(Html.Raw(current ? " current" : ""))">@(page.GetBestMenuName())</a>
                }
            }
        }

        else
        {
            if (Model.HasValue("links"))
            {
                foreach (var link in Model.Value<IEnumerable<Link>>("links"))
                {
                    var content = Umbraco.Content(link.Udi);

                    if (content != null)
                    {
                        var current = false;
                        var currentUrl = HttpContext.Current.GetRelativeUrl(useLowerCase: true, stripQueryString: true);
                        var newUrl = content.GetRelativeUrl().ToLower().RemoveQueryString().TrimEnd("/");

                        if (currentUrl == newUrl)
                        {
                            current = true;
                        }

                                <a href="@(content.GetRelativeUrl())" target="@(link.Target)" class="not-mobile@(Html.Raw(current ? " current" : ""))">@(content.GetBestMenuName())</a>
                    }

                    else
                    {
                                <a href="@(link.Url)" target="@(link.Target)" class="not-mobile">@(link.Name)</a>
                    }
                }
            }
        }
                        </section>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <div id="primary-navigation-mobile" class="closed mobile-only">
        <nav>
            <div role="grid" style="">
                <div role="gridcell">
                    <section>
            @if (settings.HasValue("companyLogo"))
            {
                        <a href="/" title="@(settings.SafeValue("companyName")) home page"><img src="@(settings.PickerValue("companyLogo").Url)" /></a>
            }

            else
            {
                        <h3>@(settings.SafeValue("companyName"))</h3>
            }
                    </section>
                </div>

                <div role="gridcell">
                    <section>
            @if (Model.SafeValue<bool>("showChildrenOfHomePage"))
            {
                if (pages != null && pages.Count() > 0)
                {
                    foreach (var page in pages)
                    {
                        var current = false;
                        var currentUrl = HttpContext.Current.GetRelativeUrl(useLowerCase: true, stripQueryString: true);
                        var newUrl = page.GetRelativeUrl().ToLower().RemoveQueryString().TrimEnd("/");

                        if (currentUrl == newUrl)
                        {
                            current = true;
                        }

                        <a href="@(page.GetRelativeUrl())" class="@(Html.Raw(current ? " current" : ""))">@(page.GetBestMenuName())</a>
                    }
                }
            }

            else
            {
                if (Model.HasValue("links"))
                {
                    foreach (var link in Model.Value<IEnumerable<Link>>("links"))
                    {
                        var content = Umbraco.Content(link.Udi);

                        if (content != null)
                        {
                            var current = false;

                            if (HttpContext.Current.GetRelativeUrl(useLowerCase: true, stripQueryString: true) == content.GetRelativeUrl(useLowerCase: true, stripQueryString: true))
                            {
                                current = true;
                            }

                            <a href="@(content.GetRelativeUrl())" target="@(link.Target)" class="@(Html.Raw(current ? " current" : ""))">@(content.GetBestMenuName())</a>
                        }

                        else
                        {
                            <a href="@(link.Url)" target="@(link.Target)">@(link.Name)</a>
                        }
                    }
                }
            }
                    </section>
                </div>
            </div>
        </nav>
    </div>
</section>

<script>

    function toggleMenu() {

        $("#primary-navigation-mobile").toggleClass("closed");
        $(".dim-overlay").toggleClass("closed");
    }

    function processNavheight() {

        $("main[role='main']").css("padding-top", $("#primary-navigation").outerHeight() + "px");
    }

    $(window).on("resize", function () {

        processNavheight();
    });

    $(document).ready(function () {

        processNavheight();
    });

    var lastScrollPosition;
    var lastScrollChangePosition;
    var scrollRefreshRate = 60;
    var scrollChangePrecision = 50;
    var lastScrollDirection = "";
    var scrollMenuTimerPending = false;
    var scrollMenuCloseTimer;

    function ProcessScrolling() {

        if (lastScrollPosition != $(document).scrollTop()) {
            if (lastScrollPosition > $(document).scrollTop()) {
                if (lastScrollDirection != "up") {
                    lastScrollDirection = "up";
                    initialChangePosition = 0;
                }
                if ($(document).scrollTop() > $("#primary-navigation").outerHeight()) {
                    if (initialChangePosition == 0) {
                        initialChangePosition = lastScrollPosition;
                    }
                    if ($(document).scrollTop() < (initialChangePosition - scrollChangePrecision)) {
                        initialChangePosition = 0;
                        OpenScrollMenu();
                    }
                } else {
                    initialChangePosition = 0;
                    OpenScrollMenuNow();
                }
            }
            if (lastScrollPosition < $(document).scrollTop()) {
                if (lastScrollDirection != "down") {
                    lastScrollDirection = "down";
                    initialChangePosition = 0;
                }
                if (initialChangePosition == 0) {
                    initialChangePosition = lastScrollPosition;
                }
                if ($(document).scrollTop() > (initialChangePosition + scrollChangePrecision)) {
                    initialChangePosition = 0;
                    CloseScrollMenuNow();
                }
            }
            if ($(document).scrollTop() <= $("#primary-navigation").outerHeight()) {
                lastScrollDirection = "up";
                initialChangePosition = 0;
                OpenScrollMenuNow();
            }
        } else {
            CloseScrollMenuOnTimer(3000);
        }

        lastScrollPosition = $(document).scrollTop();
    }

    function InitializeScrollHandling() {

        $("#primary-navigation").addClass("animate");

        lastScrollPosition = $(document).scrollTop();
        initialChangePosition = 0;
        setInterval(ProcessScrolling, 1000 / scrollRefreshRate)
    }

    window.addEventListener("DOMContentLoaded", InitializeScrollHandling);

    function CancelScrollMenuTimer() {

        if (scrollMenuTimerPending) {
            scrollMenuTimerPending = false;
            window.clearTimeout(scrollMenuCloseTimer)
        }
    }

    function CloseScrollMenuNow() {

        if (IsScrollMenuOpen()) {
            if (!IsMobileNavMenuOpen()) {
                CancelScrollMenuTimer();
                $("#primary-navigation").addClass("hide")
            }
        }
    }

    function CloseScrollMenuOnTimer(a) {

        if (IsScrollMenuOpen()) {
            if (!IsMobileNavMenuOpen()) {
                if (!scrollMenuTimerPending) {
                    window.clearTimeout(scrollMenuCloseTimer);
                    scrollMenuTimerPending = true;
                    scrollMenuCloseTimer = setTimeout(function() {
                        $("#primary-navigation").addClass("hide");
                        CancelScrollMenuTimer()
                    }, a)
                }
            }
        } else {
            CancelScrollMenuTimer()
        }
    }

    function OpenScrollMenu() {

        scrollMenuTimerPending = false;
        window.clearTimeout(scrollMenuCloseTimer);
        if (!IsScrollMenuOpen()) {
            $("#primary-navigation").removeClass("hide")
        }
    }

    var lockScroll = function (a) {

        a.preventDefault();
        a.stopPropagation();
        return false
    };

    function LockScrollEvent(b) {

        try {
            $(b).on("touchmove", lockScroll);
            $(b).on("scroll", lockScroll);
            $(b).on("mousewheel", lockScroll);
            $(b).on("wheel", lockScroll);
            return true
        } catch (a) {
            return false
        }
    }

    function ReleaseScrollEvent(b) {

        try {
            $(b).off("touchmove", lockScroll);
            $(b).off("scroll", lockScroll);
            $(b).off("mousewheel", lockScroll);
            $(b).off("wheel", lockScroll);
            return true
        } catch (a) {
            return false
        }
    }

    function IsScrollMenuOpen() {

        if ($("#primary-navigation").hasClass("hide")) {
            return false
        } else {
            return true
        }
    }

    function IsMobileNavMenuOpen() {

        if ($("#primary-navigation-mobile").hasClass("closed") === false) {
            return true
        } else {
            return false
        }
    }

    $(document).ready(function () {

        processNavheight();
    });

</script>
    }
}
