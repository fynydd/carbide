@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using System
@using System.Security.Cryptography
@using Umbraco.Web
@using Carbide.Web.Helpers
@using Fynydd.Carbide

@{ 
    object cssSelector;
    Html.ViewData.TryGetValue("cssSelector", out cssSelector);

    var selector = cssSelector == null ? "" : cssSelector.ToString();
    var breakpoints = new string[] { "zero", "phab", "tabp", "tabl", "note", "desk", "elas" };
    var hasProps = false;

    foreach (var breakpoint in breakpoints)
    {
        if (hasProps == false)
        {
            var width = SiteSettings.GetCssBreakpoint(breakpoint);

            if (width != "false")
            {
                var propName = breakpoint + "CssProperties";

                if (Model.SafeValue(propName).HasValue())
                {
                    hasProps = true;
                }
            }
        }
    }

    if (hasProps)
    {
<style type="text/css">
        @foreach (var breakpoint in breakpoints)
{
    var width = SiteSettings.GetCssBreakpoint(breakpoint);

    if (width != "false")
    {
        var propName = breakpoint + "CssProperties";

        if (Model.SafeValue(propName).HasValue())
        {
<text>
    @@media (min-width: @(width)) {
</text>

            if (selector == ":root")
            {
<text>
            :root {

                @(Model.SafeValue(propName))
            }
</text>
            }

            else
            {
<text>
            @Html.Raw(selector + ", " + selector + " > [sf-outer-wrapper], " + selector + " > [sf-outer-wrapper] > [sf-inner-wrapper]") {

                @(Model.SafeValue(propName))
            }
</text>
            }
<text>
    }
</text>
        }
    }
}
</style>
    }
}
