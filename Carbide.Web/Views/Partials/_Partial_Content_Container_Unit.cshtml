@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using ContentModels = Umbraco.Web.PublishedModels
@using System.Xml
@using System.Xml.Linq
@using Umbraco.Core
@using Umbraco.Core.IO
@using Umbraco.Core.Models.Packaging
@using Umbraco.Core.Services

@using Carbide.Web.Helpers
@using Fynydd.Carbide

@{
    var umbCtx = DependencyResolver.Current.GetService<IUmbracoContextFactory>().EnsureUmbracoContext().UmbracoContext;

    object _instanceId;
    Html.ViewData.TryGetValue("instanceId", out _instanceId);
    var instanceId = _instanceId == null ? "container-unit" : _instanceId.ToString();
    Html.ViewData.TryGetValue("pageId", out _instanceId);
    var pageId = _instanceId == null ? -1 : Convert.ToInt32(_instanceId.ToString());
    var page = umbCtx.Content.GetById(pageId);

    Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", ".carbide_container_unit#" + instanceId));
    Html.RenderPartial("_Partial_CSS_Custom_Properties", Model, Html.ViewData);
    Html.ViewData.Clear();
}
@if (Model.HasProperty("contentUnits") && Model.HasValue("contentUnits"))
{
<section id="@(instanceId)" class="carbide_container_unit" sf-unit>
    <div sf-outer-wrapper>
        <div sf-inner-wrapper>
            <div role="grid" style="--sf-tabp-gutters: var(--column-gutter); --sf-row-gutters: var(--row-gutter);">
@if(Model.SafeValue("showSidebarNavigation").HasValue() && Model.SafeValue("showSidebarNavigation") != "None")
{
    var parent = (Model.SafeValue("showSidebarNavigation") == "Children" ? page : page.Parent);
    var items = parent.Children().Where(d => d.GetTemplateAlias().HasValue() && d.HasProperty("showInNavigation") && d.SafeValue<bool>("showInNavigation"));

                <div role="gridcell" class="navigation-column">
                    <section>

    @if (Model.SafeValue<bool>("showParentInSidebar"))
    {
                        <p class="parent">
                            <a href="@(parent.GetUrlPath())">@(Html.Raw(parent.GetBestMenuName()))</a>
                        </p>
    }

    @if (items.Count() > 0)
    {
                        <ul>
        @foreach (var item in items.OrderBy(y => y.SortOrder).OrderBy(x => x.Level))
        {
                            <li>
                @if(item.Id != page.Id)
                {
                            @(Html.Raw("<a href=\"" + item.GetUrlPath() + "\">"))
                }
                @(Html.Raw(item.GetBestMenuName()))

                @if(item.Id != page.Id)
                {
                            @(Html.Raw("</a>"))
                }
                            </li>
        }
                        </ul>
    }  
                    </section>
                </div>
}
                <div role="gridcell" class="content-column">
@{
    foreach (var content in Model.SafeNestedValues("contentUnits"))
    {
        if (content.HasProperty("enabled") && content.SafeValue<bool>("enabled"))
        {
            Html.ViewData.Add(new KeyValuePair<string, object>("instanceId", content.SafeValue("unitName").AsCssSelector()));

            if (content.ContentType.Alias == "richContentSubunit")
            {
                Html.RenderPartial("_Partial_Rich_Content_Subunit", content, Html.ViewData);
            }

            if (content.ContentType.Alias == "portfolioViewSubunit")
            {
                Html.RenderPartial("_Partial_Portfolio_View_Subunit", content, Html.ViewData);
            }

            if (content.ContentType.Alias == "galleryViewSubunit")
            {
                Html.RenderPartial("_Partial_Gallery_View_Subunit", content, Html.ViewData);
            }

            Html.ViewData.Clear();
        }
    }
}
                </div>
            </div>
        </div>
    </div>
</section>
}
