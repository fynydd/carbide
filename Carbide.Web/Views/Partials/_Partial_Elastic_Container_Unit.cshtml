@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using ContentModels = Umbraco.Web.PublishedModels
@using System.Xml
@using System.Xml.Linq
@using Umbraco.Core
@using Umbraco.Core.IO
@using Umbraco.Core.Models.Packaging
@using Umbraco.Core.Services

@using Carbide.Web.Helpers
@using Fynydd.Carbide

@{
    var umbCtx = DependencyResolver.Current.GetService<IUmbracoContextFactory>().EnsureUmbracoContext().UmbracoContext;

    object _pageId;
    Html.ViewData.TryGetValue("pageId", out _pageId);
    var pageId = _pageId == null ? -1 : Convert.ToInt32(_pageId.ToString());
    var page = umbCtx.Content.GetById(pageId);

    var instanceId = Model.Key.AsCssSelector();
    Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", ".carbide_elastic_container_unit#" + instanceId));
    Html.RenderPartial("_Partial_CSS_Custom_Properties", Model.PickerValue("style"), Html.ViewData);
    Html.ViewData.Clear();
}
@if (Model.HasProperty("contentSubunits") && Model.HasValue("contentSubunits"))
{
    var imageParams = "?width=1920&quality=75";
    var imageUrl = "";

    if (Model.HasValue("backgroundImage"))
    {
        imageUrl = Model.PickerValue("backgroundImage").Url + imageParams;
    }

<script type="text/javascript">

    function toggleSidebar(container) {

        if ($(container).attr("state") == "closed") {

            $(container).children("nav").first().css('max-height', $(container).attr("data-height") + 'px');
            $(container).attr("state", "open");

        } else {

            $(container).children("nav").first().css('max-height', '0');
            $(container).children("p").first().css('max-height', '0');
            $(container).attr("state", "closed");
            $(container).attr("state", "closed");
        }
    }

    $(document).ready(function () {

        $(".navigation-column > section").each(function (index) {

            $(this).attr("data-height", parseFloat($(this).children("nav").first().outerHeight(true)));
            $(this).children("nav").first().css('max-height', '0');
            $(this).attr("state", "closed");

            if ($(window).outerWidth() >= @(SiteSettings.GetCssBreakpoint("tabp").Replace("px", ""))) {

                toggleSidebar(this);
            }
        });
    });

</script>
<section id="@(instanceId)" class="carbide_elastic_container_unit" sf-unit>
    <div class="background-image" style="@(imageUrl.HasValue() ? "background-image: url(" + imageUrl + ");" : "")"></div>
    <div sf-outer-wrapper>
        <div sf-inner-wrapper>
            <div role="grid" style="--sf-tabp-gutters: var(--column-gutter); --sf-row-gutters: var(--row-gutter);">
@if(Model.HasValue("sidebar"))
{
    var sidebar = Model.PickerValue("sidebar");

                <div role="gridcell" class="navigation-column">
                    <section>
                        <div class="toggle-button" onclick="toggleSidebar($(this).parent());"><i class="fal fa-bars"></i> @(Html.Raw(sidebar.SafeValue("sidebarTitle").ProcessShortCodes(page)))</div>
                        <nav>
                        @if(sidebar.HasValue("sidebarExcerpt"))
                        {
                            <p>@(Html.Raw(sidebar.SafeValue("sidebarExcerpt").ProcessShortCodes(page)))</p>
                        }
                        @{ 
                            var parent = (sidebar.SafeValue("showSidebarNavigation") == "Children" ? page : page.Parent);
                            var listStyle = "ul";
                            var listItemType = "li";

                            if (sidebar.HasValue("sidebarStyle"))
                            {
                                switch (sidebar.SafeValue("sidebarStyle"))
                                {
                                    case "Bullets": listStyle = "ul"; listItemType = "li"; break;
                                    case "Numbers": listStyle = "ol"; listItemType = "li"; break;
                                    default: listStyle = "div";  listItemType = "div"; break;
                                }
                            }

                            var navSettings = new NavigationSettings
                            {
                                StartNode = parent,
                                IncludeStartNode = sidebar.SafeValue<bool>("showParentInSidebar"),
                                CurrentPageId = pageId,
                                ListType = listStyle,
                                ListItemType = listItemType,
                                BulletClass = (sidebar.HasValue("bulletClass") ? sidebar.SafeValue("bulletClass") : ""),
                                MaxDepth = (sidebar.HasValue("sidebarDepth") ? sidebar.SafeValue<int>("sidebarDepth") : 2)
                            };

                            @Html.Raw(WebContent.GenerateNavigationList(navSettings));
                        }
                        </nav>
                    </section>
                </div>
}
                <div role="gridcell" class="content-column">
@{
    foreach (var content in Model.SafeNestedValues("contentSubunits"))
    {
        if (content.HasProperty("enabled") && content.SafeValue<bool>("enabled"))
        {
            if (content.ContentType.Alias == "richContentSubunit")
            {
                Html.RenderPartial("_Partial_Rich_Content_Subunit", content);
            }

            if (content.ContentType.Alias == "portfolioViewSubunit")
            {
                Html.RenderPartial("_Partial_Portfolio_View_Subunit", content);
            }

            if (content.ContentType.Alias == "galleryViewSubunit")
            {
                Html.RenderPartial("_Partial_Gallery_View_Subunit", content);
            }

            if (content.ContentType.Alias == "formSubunit")
            {
                Html.RenderPartial("_Partial_Form_Subunit", content);
            }

            if (content.ContentType.Alias == "multiColumnContentSubunit")
            {
                Html.RenderPartial("_Partial_Multi_Column_Content_Subunit", content);
            }
        }
    }
}
                </div>
            </div>
        </div>
    </div>
</section>
}
