@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using System
@using System.Security.Cryptography
@using Umbraco.Web
@using Fynydd.Carbide
@using Carbide.Web.Helpers

@{
    object _instanceId;
    Html.ViewData.TryGetValue("instanceId", out _instanceId);
    var instanceId = _instanceId == null ? "portfolio-view-subunit" : _instanceId.ToString();
    var selector = "[sf-subunit].carbide_portfolio_view_subunit#" + instanceId;

    Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", selector));
    Html.RenderPartial("_Partial_CSS_Custom_Properties", Model, Html.ViewData);

    var filterTags = Model.SafeValue("filterTags").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    var excludeTags = Model.SafeValue("excludeTags").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    var sortTags = Model.SafeValue("sortTags").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    var sortField = Model.SafeValue("sortBy");
    var sortAsc = (Model.SafeValue("sortDirection") == "Ascending");

    if (sortField == "Update Date")
    {
        sortField = "updateDate";
    }

    if (sortField == "Node Order")
    {
        sortField = "sortOrder";
    }

    var collection = Model.PickerValue("parentPage");
    var pages = collection.Children().Where(c =>
        (filterTags.Length < 1 || (filterTags.Length > 0 && filterTags.All(s => c.Value<string[]>("tags").Any(ss => s.ToLower().Trim().Contains(ss.ToLower().Trim())))))
        && (excludeTags.Length < 1 || (excludeTags.Length > 0 && excludeTags.All(s => c.Value<string[]>("tags").All(ss => s.ToLower().Trim().Contains(ss.ToLower().Trim()) == false))))
    )
        .AsQueryable()
        .OrderByDynamic(sortField, (sortAsc ? QueryExtensions.Order.Asc : QueryExtensions.Order.Desc))
        .OrderBy(o => (sortTags.Length < 1 ? (sortAsc ? 0 : 1) : sortTags.Any(t => o.Value<string[]>("tags", null, null, new Fallback(), null).Any(tt => t.ToLower().Trim().Contains(tt.ToLower().Trim()))) == true ? (sortAsc ? 0 : 1) : (sortAsc ? 1 : 0)))
        .Take(Model.SafeValue<int>("maximumItemCount"))
    ;

}
<div id="@(instanceId)" class="carbide_portfolio_view_subunit" sf-subunit>
    <div role="grid" style="--sf-tabp-gutters: var(--column-gutter); --sf-row-gutters: var(--row-gutter);">
        @foreach(var page in pages)
        {
            <div role="gridcell" style="--sf-tabp-frac: 1/3;">
                @if(page.HasValue("shareImage"))
                {
                <div sf-image-wrapper>
                    <a href="@(page.GetUrlPath())"><img src="@(Html.Raw(page.GetCropUrl("shareImage", "SocialSharing")))" /></a>
                </div>
                }
                <h3><a href="@(page.GetUrlPath())">@Html.Raw(page.GetBestMenuName())</a></h3>
                @if(page.GetBestExcerpt().HasValue())
                {
                    <p>@Html.Raw(page.GetBestExcerpt())</p>
                }
            </div>
        }
    </div>
</div>
