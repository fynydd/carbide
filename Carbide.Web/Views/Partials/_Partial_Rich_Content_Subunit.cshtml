@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>
@using System
@using System.Security.Cryptography
@using Umbraco.Web
@using Fynydd.Carbide
@using Carbide.Web.Helpers

@{
    var instanceId = Model.Key.AsCssSelector();
    var selector = "[sf-subunit].carbide_rich_content_subunit#" + instanceId;

    Html.ViewData.Add(new KeyValuePair<string, object>("cssSelector", selector));
    Html.RenderPartial("_Partial_CSS_Custom_Properties", Model.PickerValue("style"), Html.ViewData);



    // BEGIN: MICROSOFT EDGE OVERRIDES

    var breakpoints = new string[] { "zero", "phab", "tabp", "tabl", "note", "desk", "elas" };
    var processMicrosoftEdgeOverrides = false;

    foreach (var breakpoint in breakpoints)
    {
        var width = SiteSettings.GetCssBreakpoint(breakpoint);

        if (width != "false")
        {
            if (Model.PickerValue("style").SafeValue(breakpoint + "CssProperties").HasValue())
            {
                var props = Model.PickerValue("style").SafeValue(breakpoint + "CssProperties").ToLower().Replace(" ", "");

                if (props.Contains("--content-align:") || props.Contains("--nodes-align:"))
                {
                    processMicrosoftEdgeOverrides = true;
                    break;
                }
            }
        }
    }

    if (processMicrosoftEdgeOverrides)
    {
    <style type="text/css">
        @foreach (var breakpoint in breakpoints)
        {
            var width = SiteSettings.GetCssBreakpoint(breakpoint);

            if (width != "false")
            {
                if (Model.PickerValue("style").SafeValue(breakpoint + "CssProperties").HasValue())
                {
                    var props = Model.PickerValue("style").SafeValue(breakpoint + "CssProperties").ToLower().Replace(" ", "");

    <text>
    @@media (min-width: @(width)) {

        @if (props.Contains("--content-align:"))
        {
            <text>
            @Html.Raw(selector) {

                text-align: @(props.Contains("--content-align:center") ? "center" : (props.Contains("--content-align:right") ? "right" : "left"));
            }
            </text>
        }

        @if (props.Contains("--headline-align:"))
        {
            <text>
            @Html.Raw(selector + " h1, " + selector + " h2, " + selector + " h3, " + selector + " h4, " + selector + " h5, " + selector + " h6") {

                text-align: @(props.Contains("--headline-align:center") ? "center" : (props.Contains("--headline-align:right") ? "right" : "left"));
            }
            </text>
        }

        @if (props.Contains("--button-align:"))
        {
            <text>
            @Html.Raw(selector + " .button-row") {

                text-align: @(props.Contains("--button-align:center") ? "center" : (props.Contains("--button-align:right") ? "right" : "left"));
            }
            </text>
        }
    }
    </text>
                }
            }
        }
    </style>
    }

    // END: MICROSOFT EDGE OVERRIDES
}
<div id="@(instanceId)" class="carbide_rich_content_subunit" sf-subunit>
    @if (Model.SafeValue("headline").HasValue())
    {
        @Html.Raw("<" + Model.SafeValue("headlineStyle") + ">" + Model.SafeValue("headline").ProcessShortCodes(UmbracoContext) + "</" + Model.SafeValue("headlineStyle") + ">")
    }
    <div role="grid" style="--sf-tabp-gutters: var(--column-gutter); --sf-row-gutters: var(--row-gutter);">
        @if (Model.SafeValue("richContent").HasValue() && Model.SafeValue("richContentColumn2").HasValue())
        {
            <div role="gridcell" style="--sf-tabp-frac: 1/2;">
                @Html.Raw(Model.SafeValue("richContent").ProcessShortCodes(UmbracoContext))
            </div>
            <div role="gridcell" style="--sf-tabp-frac: 1/2;">
                @Html.Raw(Model.SafeValue("richContentColumn2").ProcessShortCodes(UmbracoContext))
            </div>
        }
        else
        {
            <div role="gridcell">
                @Html.Raw(Model.SafeValue("richContent").ProcessShortCodes(UmbracoContext))
            </div>
        }
        @if (Model.SafeValue("buttonText").HasValue())
        {
            <div role="gridcell" class="button-row">
                <a href="@(Model.HasValue("buttonLink") ? Model.PickerValue("buttonLink").Url : Model.SafeValue<string>("buttonUrl"))" role="button">@Html.Raw(Model.SafeValue("buttonText").ProcessShortCodes(UmbracoContext))</a>
            </div>
        }
    </div>
</div>
