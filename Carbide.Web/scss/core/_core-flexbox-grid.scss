//-----------------------------------------------------------------------//
// $FLEXBOX-GRID
// This is the flexbox-based responsive grid system.
// Flexbox is used because standard responsive grids
// have been problematic with scaling content.
// Most responsive grid features are available, including
// a twelve unit measurement system in addition to percentages.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

@mixin sf-flexbox-grid (
    $from:false,
    $upto:false,

    $use-wrap:true,
    $gridcell-direction:row,
    $use-equal-heights:false,

    $gutter:false,             // Horizontal gutter (e.g. 5%, 3rem)
    $row-gutter:false,         // Bottom margin (gutter) when grid cells wrap, except for the last row (e.g. 3rem)

    $justify-content:flex-start,
    $align-items:flex-start,
    $centered-grid:false
    ) {


    // GLOBAL GRID VARIABLES, RESET

    $sf-fbg-position: relative !global;
    $sf-fbg-display: flex !global;

    $sf-fbg-padding-top: 0 !global;
    $sf-fbg-padding-right: 0 !global;
    $sf-fbg-padding-bottom: 0 !global;
    $sf-fbg-padding-left: 0 !global;

    $sf-fbg-margin-top: 0 !global;
    $sf-fbg-margin-right: 0 !global;
    $sf-fbg-margin-bottom: 0 !global;
    $sf-fbg-margin-left: 0 !global;

    $sf-fbg-flex-direction: $gridcell-direction !global;
    $sf-fbg-flex-wrap: nowrap !global;
    $sf-fbg-flex-grow: 1 !global;
    $sf-fbg-flex-shrink: initial !global;

    $sf-fbg-gridcell-display: block !global;
    $sf-fbg-gridcell-position: relative !global;

    $sf-fbg-gridcell-padding-top: 0 !global;
    $sf-fbg-gridcell-padding-right: 0 !global;
    $sf-fbg-gridcell-padding-bottom: 0 !global;
    $sf-fbg-gridcell-padding-left: 0 !global;

    $sf-fbg-gridcell-height: auto !global;

    $sf-fbg-gridcell-box-sizing: false !global;
    $sf-fbg-gridcell-flex-grow: 0 !global;
    $sf-fbg-gridcell-flex-shrink: initial !global;
    $sf-fbg-gridcell-flex-direction: initial !global;
    $sf-fbg-gridcell-justify-content: initial !global;

    $sf-fbg-gridcell-presentation-height: auto !global;

    // BEGIN MIXIN

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @if ($centered-grid != false) {

        $align-items: center;
    }

    @if ($use-wrap != false) {

        $sf-fbg-flex-wrap: wrap !global;
    }

    @if ($use-equal-heights == true) {

        $align-items: stretch;
        $sf-fbg-gridcell-justify-content: flex-start !global;
        $sf-fbg-gridcell-presentation-height: 100% !global;
    }

    @if ($centered-grid != false) {

        $sf-fbg-gridcell-display: flex !global;
        $sf-fbg-gridcell-justify-content: center !global;
    }

    @if ($from-breakpoint == zero) {

        @include sf-render-grid($centered-grid, $align-items, $justify-content, $gutter, $row-gutter);

    } @else {

        @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

            @include sf-render-grid($centered-grid, $align-items, $justify-content, $gutter, $row-gutter);
        }
    }
}

@mixin sf-render-grid (
    $centered-grid,
    $align-items,
    $justify-content,
    $gutter,
    $row-gutter
    ) {

    display: #{$sf-fbg-display};
    position: #{$sf-fbg-position};

    padding-top: #{$sf-fbg-padding-top};
    padding-right: #{$sf-fbg-padding-right};
    padding-bottom: #{$sf-fbg-padding-bottom};
    padding-left: #{$sf-fbg-padding-left};

    margin-top: #{$sf-fbg-margin-top};
    margin-right: #{$sf-fbg-margin-right};
    margin-bottom: #{$sf-fbg-margin-bottom};
    margin-left: #{$sf-fbg-margin-left};

    @if ($row-gutter != false) {

        margin-top: #{$row-gutter/2 * -1};
        margin-bottom: #{$row-gutter/2 * -1};

        [role="grid"][sf-row-gutters] + & {

            margin-top: #{$row-gutter * -1};
        }

        @each $breakpoint, $props in $media-breakpoints {

            @each $prop in $props {

                [role="grid"][sf-#{$prop}-row-gutters] + & {

                    margin-top: #{$row-gutter * -1};
                }
            }
        }

    }

    flex-grow: #{$sf-fbg-flex-grow};
    flex-shrink: #{$sf-fbg-flex-shrink};
    flex-wrap: #{$sf-fbg-flex-wrap};
    flex-direction: #{$sf-fbg-flex-direction};
    align-items: #{$align-items};
    justify-content: #{$justify-content};

    $gcwidth: false;

    & > [role="gridcell"] {

        display: #{$sf-fbg-gridcell-display};
        position: #{$sf-fbg-gridcell-position};

        flex-direction: #{$sf-fbg-gridcell-flex-direction};
        justify-content: #{$sf-fbg-gridcell-justify-content};
        flex-grow: #{$sf-fbg-gridcell-flex-grow};
        flex-shrink: #{$sf-fbg-gridcell-flex-shrink};

        padding-top: #{$sf-fbg-gridcell-padding-top};
        padding-right: #{$sf-fbg-gridcell-padding-right};
        padding-bottom: #{$sf-fbg-gridcell-padding-bottom};
        padding-left: #{$sf-fbg-gridcell-padding-left};
    
        height: #{$sf-fbg-gridcell-height};

        @if ($gcwidth != false) {

            width: #{$gcwidth};

            @if ($sf-fbg-gridcell-flex-grow != 0) {

                flex-grow: 0;
            }

        } @else {

            width: 100%;
        }

        @if ($gutter != false) {

            padding-left: #{$gutter/2};
            padding-right: #{$gutter/2};
        }

        @if ($row-gutter != false) {

            padding-top: #{$row-gutter/2};
            padding-bottom: #{$row-gutter/2};
        }
    
        @if ($sf-fbg-gridcell-box-sizing != false) {

            box-sizing: #{$sf-fbg-gridcell-box-sizing};
        }

        & > *:first-child {

            height: #{$sf-fbg-gridcell-presentation-height};

            @if ($centered-grid != false) {

                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
            }
        }        
    }    
}

@mixin sf-make-equal-heights() {

    align-items: stretch;

    & > [role="gridcell"] {

        & > * {

            height: 100%;
        }
    }
}

@mixin sf-make-centered-grid() {

    align-items: stretch;

    & > [role="gridcell"] {

        & > * {

            height: 100%;

            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }
    }
}

@mixin sf-set-gutters (
    $from:false,
    $upto:false,
    $gutter:false,
    $row-gutter:false
) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @if ($gutter != false) {

        @if (sf-get-unit($gutter) == "") {

            $gutter: sf-to-length($gutter, "%");
        }
    }

    @if ($from-breakpoint == zero) {

        @if ($row-gutter != false) {

            margin-top: #{$row-gutter/2 * -1};
            margin-bottom: #{$row-gutter/2 * -1};

            [role="grid"][sf-row-gutters] + & {

                margin-top: #{$row-gutter * -1};
            }

            @each $breakpoint, $props in $media-breakpoints {

                @each $prop in $props {

                    [role="grid"][sf-#{$prop}-row-gutters] + & {

                        margin-top: #{$row-gutter * -1};
                    }
                }
            }
        }

        @if ($gutter != false) {

            margin-left: #{$gutter/2 * -1};
            margin-right: #{$gutter/2 * -1};
    
            & > [role="gridcell"] {
        
                padding-left: #{$gutter/2};
                padding-right: #{$gutter/2};
            }
        }

        @if ($row-gutter != false) {

            & > [role="gridcell"] {
        
                padding-top: #{$row-gutter/2};
                padding-bottom: #{$row-gutter/2};
            }
        }

    } @else {

        @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

            @if ($row-gutter != false) {

                margin-top: #{$row-gutter/2 * -1};
                margin-bottom: #{$row-gutter/2 * -1};
            }

            [role="grid"][sf-row-gutters] + & {

                margin-top: #{$row-gutter * -1};
            }

            @each $breakpoint, $props in $media-breakpoints {

                @each $prop in $props {

                    [role="grid"][sf-#{$prop}-row-gutters] + & {

                        margin-top: #{$row-gutter * -1};
                    }
                }
            }
            
            @if ($gutter != false) {

                margin-left: #{$gutter/2 * -1};
                margin-right: #{$gutter/2 * -1};
        
                & > [role="gridcell"] {
            
                    padding-left: #{$gutter/2};
                    padding-right: #{$gutter/2};
                }
            }

            @if ($row-gutter != false) {

                & > [role="gridcell"] {
            
                    padding-top: #{$row-gutter/2};
                    padding-bottom: #{$row-gutter/2};
                }
            }
        }
    }
}

@mixin sf-set-width (
    $from:false,
    $upto:false,
    $width:false,
    $important:false,
    $property:width
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $important-text: "";
    
    @if ($important != false) {

        $important-text: " !important";
    }

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    $gcwidth: $width;

    @if ($width != false) {

        $found: false;

        @if (sf-get-unit($gcwidth) != "%") {

            $gcwidth: sf-strip-unit($width)/$base-column-count * 100%;
        }
    }

    $skip: false;

    @if ($from-breakpoint != false and nth(map-get($media-breakpoints, $from-breakpoint), 1) == false)
    {
        $skip: true;
    }

    @if ($upto-breakpoint != false and nth(map-get($media-breakpoints, $upto-breakpoint), 1) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @if ($from-breakpoint != zero) {

            @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

                @if ($gcwidth != false) {

                    #{$property}: #{$gcwidth}#{$important-text};
                }

                @if ($property == width) {

                    flex-grow: 0;
                }
            }

        } @else {

            @if ($gcwidth != false) {

                #{$property}: #{$gcwidth}#{$important-text};
            }

            @if ($property == width) {

                flex-grow: 0;
            }
        }
    }
}

@mixin sf-push (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: left
    );
}

@mixin sf-pull (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: right
    );
}

