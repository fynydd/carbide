//-----------------------------------------------------------------------//
// $LISTS
// Mixins, functions, and styles for working with lists and tables.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

@mixin sf-table-column ($from, $upto:false) {
    
    @if ($from != false) {

        @if ($upto != false) {

            @if $upto < $from {

                $upto: $from;
            }

        } @else {

            $upto: $from;
        }

        @for $i from $from through $upto {

            > tr > th:nth-child(#{$i}),
            > tr > td:nth-child(#{$i}),
            > thead > tr > th:nth-child(#{$i}),
            > tbody > tr > th:nth-child(#{$i}),
            > tbody > tr > td:nth-child(#{$i}),
            > tfoot > tr > td:nth-child(#{$i}) {

                @content;
            }
        }
    }
}

@mixin sf-hide-table-column ($child) {

    @include sf-table-column($child) {

        display: none;
    }
}


//-----------------------------------------------------------------------//
// STYLES
//-----------------------------------------------------------------------//

// Where `margin-left` is concerned, we want to try and indent certain elements
// by a consistent amount
ul, dl {

    margin-left: var(--horizontal-unit-padding);
    padding: 0;

    @include sf-media($from: tablet-portrait) {

        margin-left: 2.75rem;
    }

    margin-right: 0;
    margin-bottom: 2.25rem;
    margin-top: 1.75rem;

    list-style: square;

    @include sf-media($from: tablet-portrait) {

        margin-right: 0;
        margin-bottom: 2rem;
        margin-top: 1.5rem;
    }

    &:last-child {

        margin-bottom: 0;
    }
}

ol {

    list-style-type: none;
    counter-reset: item;
    margin: 0;
    margin-bottom: 2rem;
    padding: 0;
    margin-left: 0.1rem;

    & > li {

        display: table;
        counter-increment: item;

        &:before {

          content: counters(item, ".") ". ";
          display: table-cell;
          padding-right: 0.5rem;
          white-space: nowrap;
        }

        & > ol {
        
            & > li {

                margin: 0;

                &:before {

                    content: counters(item, ".") " ";
                }
            }
        }
    }

    &:last-child {

        margin-bottom: 0;
    }
}

ul, ol, dl {

    li, dd, dt {

        padding-top: 1rem;

        &:first-child {

            padding-top: 0;
        }

        & > ol, & > ul {
        
            margin-top: 1rem;

            & > li {

                &:first-child {

                    padding-top: 0;
                }
            }
        }
    }

    &[sf-expanded] {

        margin-top: 2rem;

        @include sf-media($from: tablet-portrait) {

            margin-top: 2rem;
        }

        & > li, & > dd, & > dt {

            padding-top: 2rem;

            &:first-child {

                padding-top: 0;
            }
        }
    }

    &[sf-tight] {

        margin-top: 0;

        @include sf-media($from: tablet-portrait) {

            margin-top: 0;
        }

        & > li, & > dd, & > dt {

            padding-top: 0.5rem;

            &:first-child {

                padding-top: 0;
            }
        }
    }
}

table {

    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;

    &:last-child {

        margin-bottom: 0;
    }

    th, td {

        padding: 0;
        margin: 0;
        text-align: left;
        padding-top: 0.5rem;
        padding-right: 1rem;

        @include sf-media($from: tablet-portrait) {

            padding-top: 0.75rem;
            padding-right: 1.25rem;
        }

      	&:last-child {

            padding-right: 0;
      	}
    }

    th {

        font-weight: bold;
    }
}
