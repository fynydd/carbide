//-----------------------------------------------------------------------//
// $MEDIA-QUERIES
// Mixins, functions, and styles for using and working with media queries.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

// Get a media feature's definition from the map.
@function sf-get-feature($name, $features: $media-features) {

    @if map-has-key($features, $name) {

        @return map-get($features, $name);

    } @else {

        @return false;
    }
}

// Convert pixels to ems
@function sf-px2em($px) {

    @if unitless($px) {

        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return sf-px2em($px * 1px);

    } @else if unit($px) == em {

        @return $px;
    }

    @return ($px / 16px) * 1em;
}

// Get a breakpoint width from the map.
// Can pass the breakpoint key name or the abbreviation.
@function sf-get-breakpoint-width($name, $breakpoints: $media-breakpoints) {

    @if map-has-key($breakpoints, $name) {

        @return nth(map-get($breakpoints, $name), 1);

    } @else {

        $found: false;

        @each $breakpoint, $props in $breakpoints {

            @if (nth($props, 2) == $name) {

                $found: true;

                @return nth($props, 1);
            }
        }

        @if ($found == false) {

            @warn "Breakpoint #{$name} wasn't found in $media-breakpoints.";

            @return false;
        }
    }
}

// Media query mixin
@mixin sf-media(
    $feature:false, 
    $from:false, 
    $upto:false, 
    $type:screen
) {

    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {

        @if type-of($from) == number {

            $min-width: sf-px2em($from);

        } @else if sf-get-breakpoint-width($from) {

            $min-width: sf-px2em(sf-get-breakpoint-width($from));
        }
    }

    // Upto: that breakpoint (exclusive)
    @if $upto {

        @if type-of($upto) == number {

            $max-width: sf-px2em($upto);

        } @else if sf-get-breakpoint-width($upto) {

            $max-width: sf-px2em(sf-get-breakpoint-width($upto)) - .01em;
        }
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }

    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }

    @if $feature {

        // Pass through custom expression or get defined expression
        $original-feature: $feature;
        $feature: sf-get-feature($feature);

        @if $feature {

            $media-query: '#{$media-query} and #{$feature}';

        } @else {

            $media-query: '#{$media-query} and (#{$original-feature})';
        }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {

        $type: '';
        $media-query: str-slice(unquote($media-query), 6);
    }


    // -------------------------------------------
    // GENERATE OUTPUT
    // -------------------------------------------

    $skip: false;

    @if ($from != false and nth(map-get($media-breakpoints, $from), 1) == false)
    {
        $skip: true;
    }

    @if ($upto != false and nth(map-get($media-breakpoints, $upto), 1) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @media #{$type + $media-query} {

            @content;
        }
    }
}

@mixin sf-media-query($feature:false, $from:false, $upto:false, $type:screen) {

    @include sf-media($feature, $from, $upto, $type) {

        @content;
    }
}

// Target styles for IE10 and 11
@mixin sf-internet-explorer-11 {

    @media screen and (-ms-high-contrast: none), (-ms-high-contrast: active) {

        @content;
    }
}

// Target styles for Microsoft Edge
@mixin sf-microsoft-edge {

    @supports (display:-ms-grid) {

        @content;
    }
}


//-----------------------------------------------------------------------//
// STYLES
//-----------------------------------------------------------------------//

// TBD
